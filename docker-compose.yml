version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: disaster-mgmt-db
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: disaster_management
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - disaster-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: disaster-mgmt-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - disaster-network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: disaster-mgmt-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/disaster_management?authSource=admin
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your_super_secret_jwt_key_change_in_production
      JWT_EXPIRE: 7d
      EMAIL_HOST: smtp.gmail.com
      EMAIL_PORT: 587
      EMAIL_USER: your_email@gmail.com
      EMAIL_PASS: your_app_password
      VAPID_PUBLIC_KEY: your_vapid_public_key
      VAPID_PRIVATE_KEY: your_vapid_private_key
      VAPID_EMAIL: mailto:your_email@gmail.com
      WEATHER_API_KEY: your_weather_api_key
      WEATHER_API_URL: https://api.openweathermap.org/data/2.5
      FRONTEND_URL: http://localhost:3000
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - disaster-network

  # Frontend (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: disaster-mgmt-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:5000
      CHOKIDAR_USEPOLLING: true
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - disaster-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: disaster-mgmt-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - disaster-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  disaster-network:
    driver: bridge
